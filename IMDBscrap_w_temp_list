import requests
import re
import pandas as pd
import string
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from warnings import warn
from random import randint
from requests import Session
from bs4 import BeautifulSoup
from lxml import html
from time import sleep


headers = {'accept-language': 'en-EN',
  'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36'
  }

pages = np.arange(1, 10000, 50)

titles = []
years = []
ratings = []
genres = []
runtimes = []
imdb_ratings = []
imdb_ratings_standardized = []
metascores = []
votes = []

for page in pages:

    response = requests.get("https://www.imdb.com/search/title?genres=animation&"
                   + "start="
                   + str(page)
                   + "&explore=title_type,genres&ref_=adv_nxt", headers=headers)

    sleep(randint(2, 5))

    # throw warning for status codes that are not 200
    if response.status_code != 200:
        warn('Request: {}; Status code: {}'.format(requests, response.status_code))

    # parse the content of current iteration of request
    page_html = BeautifulSoup(response.text, 'lxml')

    movie_containers = page_html.find_all('div', class_='lister-item mode-advanced')

    # extract the 50 movies for that page
    for container in movie_containers:

        # conditional for all with metascore
        if container.find('div', class_='ratings-metascore') is not None:

            # title
            title = container.h3.a.text
            titles.append(title)

            if container.h3.find('span', class_='lister-item-year text-muted unbold') is not None:

                # year released
                year = container.h3.find('span', class_='lister-item-year text-muted unbold').text  
                # remove the parentheses around the year and make it an integer
                years.append(year)

            else:
                years.append(None) # each of the additional if clauses are to handle type None data, 
                replacing it with an empty string so the arrays are of the same length at the end of the scraping

            if container.p.find('span', class_='certificate') is not None:

                # rating
                rating = container.p.find('span', class_='certificate').text
                ratings.append(rating)

            else:
                ratings.append("")

            if container.p.find('span', class_='genre') is not None:

                # genre
                genre = container.p.find('span', class_='genre').text.replace("\n", "").rstrip().split(
                    ',')  # remove the whitespace character, strip, and split to create an array of genres
                genres.append(genre)

            else:
                genres.append("")

            if container.p.find('span', class_='runtime') is not None:

                # runtime
                time = int(container.p.find('span', class_='runtime').text.replace(" min", "")) 
                # remove the minute word from the runtime and make it an integer
                runtimes.append(time)

            else:
                runtimes.append(None)

            if float(container.strong.text) is not None:

                # IMDB ratings
                imdb = float(container.strong.text)  # non-standardized variable
                imdb_ratings.append(imdb)

            else:
                imdb_ratings.append(None)

            if container.find('span', class_='metascore').text is not None:

                # Metascore
                m_score = int(container.find('span', class_='metascore').text)  # make it an integer
                metascores.append(m_score)

            else:
                metascores.append(None)

            if container.find('span', attrs={'name': 'nv'})['data-value'] is not None:

                # Number of votes
                vote = int(container.find('span', attrs={'name': 'nv'})['data-value'])
                votes.append(vote)

            else:
                votes.append(None)

df = pd.DataFrame({'movie': titles,
                      'year': years,
                      'rating': ratings,
                      'genre': genres,
                      'runtime_min': runtimes,
                      'imdb': imdb_ratings,
                      'metascore': metascores,
                      'votes': votes}
                      )


df.to_excel("animation_data.xlsx")
